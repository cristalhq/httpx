package httpx

import (
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestRouter(t *testing.T) {
	used := ""

	mw1 := func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			used += "1"
			next.ServeHTTP(w, r)
		})
	}

	mw2 := func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			used += "2"
			next.ServeHTTP(w, r)
		})
	}

	mw3 := func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			used += "3"
			next.ServeHTTP(w, r)
		})
	}

	mw4 := func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			used += "4"
			next.ServeHTTP(w, r)
		})
	}

	mw5 := func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			used += "5"
			next.ServeHTTP(w, r)
		})
	}

	mw6 := func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			used += "6"
			next.ServeHTTP(w, r)
		})
	}

	hf := func(w http.ResponseWriter, r *http.Request) {}

	r := NewRouter()
	r.Use(mw1)
	r.Use(mw2)

	r.HandleFunc("GET /{$}", hf)

	r.Group(func(r *Router) {
		r.Use(mw3, mw4)
		r.HandleFunc("GET /foo", hf)

		r.Group(func(r *Router) {
			r.Use(mw5)
			r.HandleFunc("GET /nested/foo", hf)
		})
	})

	r.Group(func(r *Router) {
		r.Use(mw6)
		r.HandleFunc("GET /bar", hf)
	})

	r.HandleFunc("GET /baz", hf)

	tests := []struct {
		Method     string
		Path       string
		WantUsed   string
		WantStatus int
	}{
		{
			Method:     "GET",
			Path:       "/",
			WantUsed:   "12",
			WantStatus: http.StatusOK,
		},
		{
			Method:     "GET",
			Path:       "/foo",
			WantUsed:   "1234",
			WantStatus: http.StatusOK,
		},
		{
			Method:     "GET",
			Path:       "/nested/foo",
			WantUsed:   "12345",
			WantStatus: http.StatusOK,
		},
		{
			Method:     "GET",
			Path:       "/bar",
			WantUsed:   "126",
			WantStatus: http.StatusOK,
		},
		{
			Method:     "GET",
			Path:       "/baz",
			WantUsed:   "12",
			WantStatus: http.StatusOK,
		},
		// Check global middleware used on errors generated by http.ServeMux
		{
			Method:     "GET",
			Path:       "/notfound",
			WantUsed:   "12",
			WantStatus: http.StatusNotFound,
		},
		{
			Method:     "POST",
			Path:       "/nested/foo",
			WantUsed:   "12",
			WantStatus: http.StatusMethodNotAllowed,
		},
	}

	for _, test := range tests {
		used = ""

		rq, err := http.NewRequest(test.Method, test.Path, nil)
		if err != nil {
			t.Errorf("NewRequest: %s", err)
		}

		rr := httptest.NewRecorder()
		r.ServeHTTP(rr, rq)

		rs := rr.Result()

		if rs.StatusCode != test.WantStatus {
			t.Errorf("%s %s: status want %d; have %d",
				test.Method, test.Path, test.WantStatus, rs.StatusCode,
			)
		}

		if used != test.WantUsed {
			t.Errorf("%s %s: middleware used: want %q; have %q",
				test.Method, test.Path, test.WantUsed, used,
			)
		}
	}
}
